@rendermode InteractiveAuto
@attribute [Route(Route)]
@inherits BaseComponent

@code
{
  public const string Title = "ShouldRender Test Page";
  public const string Route = "/should-render-test";

  private int ParentInt { get; set; } = 0;
  private int SomeInt { get; set; } = 0;
  private string SomeString { get; set; } = "Initial";
  private ComplexType SomeComplex { get; set; } = new ComplexType();
  private EventCallback<MouseEventArgs> SomeCallback { get; set; }
  private string CascadeValue { get; set; } = "Initial Cascade";

  protected override void OnInitialized()
  {
    base.OnInitialized();
    SomeCallback = EventCallback.Factory.Create<MouseEventArgs>(this, HandleCallback);
  }

  private void TriggerEvent()
  {
    Console.WriteLine("TriggerEvent");
    ParentInt++;
  }

  private void TriggerParameterChangeOfPrimitiveType()
  {
    SomeInt++;
    SomeString = $"Updated {SomeInt}";
  }

  private void TriggerParameterChangeOfComplexType()
  {
    SomeComplex = new ComplexType
    {
      Property = $"Updated {DateTime.Now}"
    };
  }

  private void TriggerParameterChangeOfEventCallback()
  {
    SomeCallback = EventCallback.Factory.Create<MouseEventArgs>(this, NewHandleCallback);
  }

  private void TriggerSubscriptionUpdate()
  {
    Mediator.Send(new CounterState.IncrementCountActionSet.Action());
  }

  private void TriggerForceRender()
  {
    ReRender();
  }

  private void TriggerStateHasChanged()
  {
    StateHasChanged();
  }

  private void HandleCallback(MouseEventArgs args) {}
  private void NewHandleCallback(MouseEventArgs args) {}

  public class ComplexType
  {
    public string Property { get; set; } = "";
  }

  private void TriggerCounterStateChange()
  {
    Send(new CounterState.IncrementCountActionSet.Action());
  }
}

<PageTitle>@Title</PageTitle>
<div class=@Id>


  <h1>@Title</h1>
  @RenderModeDisplay
  <hr>

  <ul class="render-info">
    <li>ParentInt: @ParentInt</li>
    <li>Render Count: @(RenderCount+1)</li>
    <li>Render Reason: @RenderReason</li>
    <li>Render Reason Detail: @RenderReasonDetail</li>
  </ul>

  <button @onclick=TriggerEvent>Trigger Event</button>
  <button @onclick=TriggerParameterChangeOfPrimitiveType>Trigger Primitive Parameter Change</button>
  <button @onclick=TriggerParameterChangeOfComplexType>Trigger Complex Parameter Change</button>
  <button @onclick=TriggerParameterChangeOfEventCallback>Trigger EventCallback Parameter Change</button>
  <button @onclick=TriggerSubscriptionUpdate>Trigger Subscription Update</button>
  <button @onclick=TriggerForceRender>Trigger Force Render</button>
  <button @onclick=TriggerStateHasChanged>Trigger StateHasChanged</button>
  <button @onclick=TriggerCounterStateChange>Trigger a CounterState Change</button>

  <div class="grid-container">
    <ChildComponentParameterless />
    <ChildComponentWithPrimitives SomeInt="@SomeInt" SomeString="@SomeString" />
    <ChildComponentWithComplex SomeComplex=@SomeComplex />
    <ChildComponentWithEventCallback SomeCallback="@SomeCallback" />
    <CascadingValue Value="@CascadeValue">
      <ChildComponentWithCascade />
    </CascadingValue>
    <ChildComponentWithAllParameters
      SomeInt="@SomeInt"
      SomeComplex="@SomeComplex"
      SomeCallback="@SomeCallback" />

    <ChildComponentWithCounterStateSubscription/>
    <ChildComponentWithCounterStateRenderTrigger/>
  </div>
</div>

<style>
  @($@"

    .{Id} .grid-container {{
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }}

    .{Id} .grid-container * {{
      min-width: 0;
    }}

    /* Ensure the last child (Counter) spans full width if odd number of children */
    .{Id} .grid-container > :last-child:nth-child(odd) {{
      grid-column: 1 / -1;
    }}
  ")
</style>
