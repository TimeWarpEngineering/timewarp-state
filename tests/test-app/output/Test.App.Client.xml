<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.App.Client</name>
    </assembly>
    <members>
        <member name="T:Test.App.Client.AssemblyMarker">
            <summary>
            Serves as a marker for the assembly, facilitating easy identification and reflection-based operations.
            </summary>
            <remarks>
            This class is intended to be used as a reference point within the assembly for scenarios such as assembly scanning,
            where a stable, known type is required to locate the assembly at runtime. The class is sealed to indicate it is not
            designed for inheritance or extension, reinforcing its role as a simple marker.
            </remarks>
        </member>
        <member name="T:Test.App.Client.Features.Base.BaseActionHandler`1">
            <summary>
            Base Handler that makes it easy to access state
            </summary>
            <typeparam name="TAction">The Type of Action to be handled</typeparam>
        </member>
        <member name="M:Test.App.Client.Features.Base.BaseActionHandler`1.#ctor(TimeWarp.State.IStore)">
            <summary>
            Base Handler that makes it easy to access state
            </summary>
            <typeparam name="TAction">The Type of Action to be handled</typeparam>
        </member>
        <member name="T:Test.App.Client.Features.Base.Components.BaseComponent">
            <summary>
            Makes access to the State a little easier and by inheriting from
            TimeWarpStateDevToolsComponent it allows for ReduxDevTools operation.
            </summary>
            <remarks>
            In production one would NOT be required to use these base components
            But would be required to properly implement the required interfaces.
            one could conditionally inherit from BaseComponent for production build.
            </remarks>
        </member>
        <member name="T:Test.App.Client.Features.Base.Components.BaseInputComponent`1">
            <summary>
            Makes access to the State a little easier and by inheriting from
            TimeWarpStateDevToolsInputComponent it allows for ReduxDevTools operation.
            </summary>
            <remarks>
            In production one would NOT be required to use these base components
            But would be required to properly implement the required interfaces.
            one could conditionally inherit from BaseComponent for production build.
            </remarks>
        </member>
        <member name="M:Test.App.Client.Features.WeatherForecast.CacheableWeatherState.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Test.App.Client.Features.WeatherForecast.WeatherForecastsState.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Test.App.Client.Features.CloneTest.CloneableState.Initialize(System.Int32)">
            <summary>
            Use in Tests ONLY, to initialize the State
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Test.App.Client.Features.CloneTest.CloneableState.Initialize">
            <summary>
            Set the Initial State
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.CloneTest.CloneableState.Clone">
            <summary>
            
            </summary>
            <remarks>We are trying to prove ICloneable is used when available instead of AnyClone.</remarks>
            <returns>New CloneableState object where Count is always 42</returns>
        </member>
        <member name="F:Test.App.Client.Features.CloneTest.Pages.ClonablePage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Features.CloneTest.Pages.ClonablePage.Route">
            <summary>
            The route to this page
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.Counter.ColorState.Initialize">
            <summary>
            Set the Initial State
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.Counter.CounterState.ThrowExceptionActionSet.Handler.Handle(Test.App.Client.Features.Counter.CounterState.ThrowExceptionActionSet.Action,System.Threading.CancellationToken)">
            <summary>
            Intentionally throw so we can test exception handling.
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.Counter.CounterState.ThrowServerSideExceptionActionSet.Handler.Handle(Test.App.Client.Features.Counter.CounterState.ThrowServerSideExceptionActionSet.Action,System.Threading.CancellationToken)">
            <summary>
            Intentionally throw so we can test exception handling.
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.Counter.CounterState.Initialize">
            <summary>
            Set the Initial State
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.Counter.CounterState.Initialize(System.Int32)">
            <summary>
            Use in Tests ONLY, to initialize the State
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Test.App.Client.Features.EventStream.EventStreamBehavior`2">
            <summary>
            Every event that comes through the pipeline adds an object to the EventStreamState
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <remarks>To avoid infinite recursion don't add AddEvent to the event stream</remarks>
        </member>
        <member name="M:Test.App.Client.Features.EventStream.EventStreamBehavior`2.#ctor(Microsoft.Extensions.Logging.ILogger{Test.App.Client.Features.EventStream.EventStreamBehavior{`0,`1}},TimeWarp.Mediator.ISender)">
            <summary>
            Every event that comes through the pipeline adds an object to the EventStreamState
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <remarks>To avoid infinite recursion don't add AddEvent to the event stream</remarks>
        </member>
        <member name="P:Test.App.Client.Features.Color.Components.InputColor.ParsingErrorMessage">
            <summary>
            The error message to display when the value is not a valid color.
            </summary>
        </member>
        <member name="M:Test.App.Client.Features.Color.Components.InputColor.ColorToString(System.Drawing.Color)">
            <summary>
            The Hexadecimal color value. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Test.App.Client.Features.Color.Components.InputColor.FormatValueAsString(System.Drawing.Color)">
            <inheritdoc />
        </member>
        <member name="M:Test.App.Client.Features.Color.Components.InputColor.TryParseValueFromString(System.String,System.Drawing.Color@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Test.App.Client.Pipeline.MyBehavior`2">
            <summary>
            Sample Pipeline Behavior AKA Middle-ware
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <remarks>see TimeWarp.Mediator for more examples</remarks>
        </member>
        <member name="F:Test.App.Client.Pages.CounterPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CounterPage.Route">
            <summary>
            The route of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ActiveActionsPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ActiveActionsPage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CachableWeatherForecastsPage.Title">
            <summary>
            The title for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CachableWeatherForecastsPage.Route">
            <summary>
            The route for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ChangeRoutePage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ChangeRoutePage.Route">
            <summary>
            The route to this page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CloneTestPage.Title">
            <summary>
            The title for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CloneTestPage.Route">
            <summary>
            The route for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CustomInputExamplePage.Title">
            <summary>
            The title for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.CustomInputExamplePage.Route">
            <summary>
            The route for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.EventStreamPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.EventStreamPage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.GoBackPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.GoBackPage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.JavaScriptInteropPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.JavaScriptInteropPage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.PersistenceTestPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.PersistenceTestPage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ResetStorePage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ResetStorePage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ServerSidePersistenceTestPage.Title">
            <summary>
            The title of the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ServerSidePersistenceTestPage.Route">
            <summary>
            The route for the page
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ThrowExceptionPage.Title">
            <summary>
            The title for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.ThrowExceptionPage.Route">
            <summary>
            The route for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.WasmWeatherForecastsPage.Title">
            <summary>
            The title for the page.
            </summary>
        </member>
        <member name="F:Test.App.Client.Pages.WasmWeatherForecastsPage.Route">
            <summary>
            The route for the page.
            </summary>
        </member>
        <member name="M:Test.App.Client.Pages.WasmWeatherForecastsPage.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:AnyClone.Tests.Extensions.CollectionExtensions.EnumerableEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compare any enumerable to another enumerable
            </summary>
            <param name="collection"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
    </members>
</doc>
