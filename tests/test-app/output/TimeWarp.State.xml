<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimeWarp.State</name>
    </assembly>
    <members>
        <member name="T:TimeWarp.State.AssemblyMarker">
            <summary>
            Serves as a marker for the assembly, facilitating easy identification and reflection-based operations.
            </summary>
            <remarks>
            This class is intended to be used as a reference point within the assembly for scenarios such as assembly scanning,
            where a stable, known type is required to locate the assembly at runtime. The class is sealed to indicate it is not
            designed for inheritance or extension, reinforcing its role as a simple marker.
            </remarks>
        </member>
        <member name="T:TimeWarp.State.ITimeWarpStateComponent">
            <summary>
            Minimum implementation needed for TimeWarp.State to function
            </summary>
            <example>
            <![CDATA[
            public class YourBaseComponent : BlazorComponent, ITimeWarpStateComponent
            {
              static readonly ConcurrentDictionary<string, int> s_InstanceCounts = new();
              public TimeWarpStateComponent()
              {
                string name = GetType().Name;
                int count = s_InstanceCounts.AddOrUpdate(name, 1, (key, value) => value + 1);
                Id = $"{name}-{count}";
              }
              public string Id { get; }
              public void ReRender() => StateHasChanged();
            }
            ]]>
            </example>
        </member>
        <member name="M:TimeWarp.State.ITimeWarpStateComponent.ShouldReRender(System.Type)">
            <summary>
            Determines whether the component should re-render for the given state.
            </summary>
            <param name="stateType">The type of the state being checked.</param>
            <returns>
            <c>true</c> if the component should re-render based on the state and its previous values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TimeWarp.State.TimeWarpStateComponent">
            <summary>
              A non required Base Class that injects Mediator and Store.
              And exposes StateHasChanged
            </summary>
            <remarks>Implements ITimeWarpStateComponent by Injecting</remarks>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.CheckParameterChanged(Microsoft.AspNetCore.Components.ParameterValue)">
            <summary>
            Checks if a parameter has changed.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the parameter has changed, false otherwise.</returns>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.CheckComplexParameterChanged(System.String,System.Object,System.Object)">
            <summary>
            Checks if a complex parameter has changed.
            </summary>
            <param name="parameterName"></param>
            <param name="currentValue">The current value of the parameter.</param>
            <param name="incomingValue">The new value of the parameter.</param>
            <returns>
            True if the parameter has changed, false otherwise.
            </returns>
            <remarks>
            This method performs a basic reference comparison by default.
            Override this method in derived classes to implement custom comparison logic for complex types.
            Note: When overriding, be mindful of the performance implications of your custom comparison logic,
            especially for large or deeply nested objects.
            </remarks>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateComponent.Subscriptions">
            <summary>
              Maintains all components that subscribe to a State.
              Is updated by using the GetState method
            </summary>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateComponent.Id">
            <summary>
              A generated unique Id based on the Class name and number of times they have been created
            </summary>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateComponent.TestId">
            <summary>
              Allows for the Assigning of a value one can use to select an element during automated testing.
            </summary>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.GetState``1(System.Boolean)">
            <summary>
              Place a Subscription for the calling component
              And returns the requested state 
            </summary>
            <param name="placeSubscription"></param>
            <typeparam name="TState"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.RemoveState``1">
            <summary>
            Allows for the removal of a state and its previous state.
            </summary>
            <typeparam name="TState"></typeparam>
            <remarks>Use this in Dispose to free up memory</remarks>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.ReRender">
            <summary>
            Triggers a re-render of the component by setting the ReRenderWasCalled flag
            and invoking the base StateHasChanged method asynchronously.
            </summary>
            <remarks>
            This is the preferred method to force a re-render of the component
            from external code or in response to specific events or conditions.
            Use this method when you want to trigger a re-render due to a state change that
            Blazor might not automatically detect, such as changes to fields or properties
            that are not marked as parameters.
            </remarks>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.StateHasChanged">
            <summary>
            Notifies the component that its state has changed and triggers a re-render.
            </summary>
            <remarks>
            This method overrides the base Blazor StateHasChanged method to provide additional
            tracking of when StateHasChanged is called directly. It sets the StateHasChangedWasCalled
            flag and then invokes the base implementation asynchronously.
            
            Note: This method is called automatically by Blazor in many scenarios, such as
            after event handlers complete. For manual re-render requests, prefer using the ReRender()
            method instead of calling StateHasChanged() directly.
            </remarks>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.ShouldReRender(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.ShouldReRender``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Determines whether the component should re-render based on changes in a specific state type.
            </summary>
            <typeparam name="TState">The type of state to check.</typeparam>
            <param name="stateType">The type of state that has changed.</param>
            <param name="condition">A function that evaluates given the previous state and returns true if a re-render is needed.</param>
            <returns>True if the component should re-render; otherwise, false.</returns>
            <remarks>
            This method checks if the changed state type matches the generic type parameter T.
            If it matches, it retrieves the previous state and applies the provided condition.
            The component will re-render if the condition returns true given the previous state.
            </remarks>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateComponent.RegisterRenderTriggerCondition``1(System.Func{``0,System.Boolean})">
            <summary>
            Registers a render trigger for a specific state type.
            </summary>
            <typeparam name="TState">The type of state to check. Must be a reference type.</typeparam>
            <param name="triggerCondition">A function that takes the previous state of type T and returns a boolean indicating whether a re-render is needed.</param>
            <remarks>
            This method adds a new entry to the RenderTriggers dictionary. The key is the Type of T, 
            and the value is a function that will be called to determine if a re-render is necessary 
            when the state of type T changes. The function should compare the previous state 
            (passed as an argument) with the current state (which should be accessible within the component).
            </remarks>
            <example>
            <code>
            RegisterRenderTrigger&lt;UserState&gt;(previousUserState => UserState.Name != previousUserState.Name);
            </code>
            </example>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateComponent.IsPreRendering">
            <summary>
              Indicates if the component is being prerendered.
            </summary>
        </member>
        <member name="T:TimeWarp.State.TimeWarpStateInputComponent`1">
            <summary>
            A non required Base Class that injects Mediator and Store.
            And exposes StateHasChanged
            </summary>
            <remarks>Implements ITimeWarpStateComponent by Injecting</remarks>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateInputComponent`1.Id">
            <summary>
            A generated unique Id based on the Class name and number of times they have been created
            </summary>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateInputComponent`1.TestId">
            <summary>
            Allows for the Assigning of a value one can use to select an element during automated testing.
            </summary>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateInputComponent`1.Subscriptions">
            <summary>
            Maintains all components that subscribe to a State.
            Is updated by using the GetState method
            </summary>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateInputComponent`1.ReRender">
            <summary>
            Exposes StateHasChanged
            </summary>
        </member>
        <member name="M:TimeWarp.State.TimeWarpStateInputComponent`1.GetState``1">
            <summary>
            Place a Subscription for the calling component
            And returns the requested state
            </summary>
            <typeparam name="TState"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TimeWarp.State.ServiceCollectionExtensions.AddTimeWarpState(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TimeWarp.State.TimeWarpStateOptions})">
            <summary>
            Register TimeWarp.State services based on the Configure options
            </summary>
            <param name="serviceCollection"></param>
            <param name="configureTimeWarpStateOptionsAction"></param>
            <returns></returns>
            <example></example>
            <remarks>
            The order of registration matters.
            If the user wants to change the order they can configure themselves vs using this extension
            </remarks>
        </member>
        <member name="M:TimeWarp.State.ServiceCollectionExtensions.EnsureLogger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            If no ILogger is registered it would throw as we inject it.  This provides us with a NullLogger to avoid that
            </summary>
            <param name="serviceCollection"></param>
        </member>
        <member name="M:TimeWarp.State.ServiceCollectionExtensions.EnsureMediator(Microsoft.Extensions.DependencyInjection.IServiceCollection,TimeWarp.State.TimeWarpStateOptions)">
            <summary>
            Scan Assemblies for Handlers.
            </summary>
            <param name="serviceCollection"></param>
            <param name="timeWarpStateOptions"></param>
        </member>
        <member name="T:TimeWarp.State.TimeWarpStateOptions">
            <summary>
            Options for configuring TimeWarp.State
            </summary>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateOptions.Assemblies">
            <summary>
            Assemblies to be searched for TimeWarp.Mediator Actions and Handlers
            </summary>
            <remarks>
            Will default to the calling assembly
            If the user specifies any assemblies they will have to specify the calling assembly also if they want it to be used.
            </remarks>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateOptions.UseStateTransactionBehavior">
            <summary>
            Use the StateTransactionBehavior (default) or not
            </summary>
        </member>
        <member name="P:TimeWarp.State.TimeWarpStateOptions.UseFullNameForStatesInDevTools">
            <summary>
            Use the FullName of the State in the ReduxDevTools
            </summary>
        </member>
        <member name="M:TimeWarp.State.IState`1.Hydrate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set the state from Dictionary
            Used by ReduxDevTools to support TimeTravel
            </summary>
            <param name="keyValuePairs"></param>
            <returns></returns>
            <remarks>Only needed for time travel which I think is waste anyway.</remarks>
        </member>
        <member name="M:TimeWarp.State.State`1.#ctor(TimeWarp.Mediator.ISender)">
            <summary>
            DI Constructor
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:TimeWarp.State.State`1.Hydrate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            returns a new instance of type TState
            </summary>
            <param name="keyValuePairs">Initialize the TState instance with these values</param>
            <returns>The particular State of type TState</returns>
            <remarks>Implement this if you want to use ReduxDevTools Time Travel</remarks>
        </member>
        <member name="M:TimeWarp.State.State`1.ThrowIfNotTestAssembly(System.Reflection.Assembly)">
            <summary>
            Use this method to prevent running methods from source other than Tests
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:TimeWarp.State.State`1.Initialize">
            <summary>
            Override this to Set the initial state
            </summary>
        </member>
        <member name="T:TimeWarp.State.Store">
            <summary>
            
            </summary>
            <summary>
            The portion of the store that is only needed to support
            ReduxDevTools Integration
            </summary>
        </member>
        <member name="P:TimeWarp.State.Store.Guid">
            <summary>
            Unique Guid for the Store.
            </summary>
            <remarks>Useful when logging </remarks>
        </member>
        <member name="M:TimeWarp.State.Store.GetState``1">
            <summary>
            Get the State of the particular type
            </summary>
            <typeparam name="TState"></typeparam>
            <returns>The specific IState</returns>
        </member>
        <member name="M:TimeWarp.State.Store.Reset">
            <summary>
            Clear all the states
            </summary>
        </member>
        <member name="M:TimeWarp.State.Store.GetSemaphore(System.Type)">
            <summary>
            Get the Semaphore for the specific State
            </summary>
        </member>
        <member name="M:TimeWarp.State.Store.SetState(TimeWarp.State.IState)">
            <summary>
            Set the state for specific Type
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:TimeWarp.State.Store.GetSerializableState">
            <summary>
            Returns the States in a manner that can be serialized
            </summary>
            <returns></returns>
            <remarks>Used only for ReduxDevTools</remarks>
        </member>
        <member name="M:TimeWarp.State.Store.LoadStatesFromJson(System.String)">
            <summary>
            Needed for ReduxDevTools time travel
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="M:TimeWarp.State.Subscriptions.ReRenderSubscribers``1">
            <summary>
            Will iterate over all subscriptions for the given type and call ReRender on each.
            If the target component no longer exists it will remove its subscription.
            </summary>
            <typeparam name="T">The type of state, which must implement IState</typeparam>
        </member>
        <member name="M:TimeWarp.State.Subscriptions.ReRenderSubscribers(System.Type)">
            <summary>
            Will iterate over all subscriptions for the given type and call ReRender on each.
            If the target component no longer exists it will remove its subscription.
            </summary>
            <param name="stateType"></param>
        </member>
        <member name="M:TimeWarp.Features.JavaScriptInterop.JsonRequestHandler.Handle(System.String,System.String)">
            <summary>
            This will handle the Javascript interop
            </summary>
            <param name="requestTypeAssemblyQualifiedName"></param>
            <param name="requestAsJson"></param>
        </member>
        <member name="T:TimeWarp.Features.JavaScriptInterop.BaseJsonRequest">
            <summary>
            Represents a base class for JSON requests sent to JavaScript functions.
            This class ensures that every request includes a request type, which can be used
            to differentiate between various types of requests in JavaScript.
            </summary>
            <remarks>
            Although this class is not used directly within this library, it serves as a template
            for consumers of the library to understand how to structure their JSON requests.
            This helps maintain consistency and clarity when performing JavaScript interop operations.
            </remarks>
        </member>
        <member name="P:TimeWarp.Features.JavaScriptInterop.BaseJsonRequest.RequestType">
            <summary>
            Gets or sets the type of the request.
            This property is used to identify the type of the request in JavaScript.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.JavaScriptInterop.BaseJsonRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TimeWarp.Features.JavaScriptInterop.BaseJsonRequest"/> class.
            </summary>
            <param name="requestType">The type of the request.</param>
        </member>
        <member name="T:TimeWarp.Features.JavaScriptInterop.JsonRequest`1">
            <summary>
            Represents a JSON request with a payload sent to JavaScript functions.
            This class extends <see cref="T:TimeWarp.Features.JavaScriptInterop.BaseJsonRequest"/> by adding a payload, allowing for
            flexible and type-safe data to be included in the request.
            </summary>
            <typeparam name="TPayload">The type of the payload included in the request.</typeparam>
            <remarks>
            Although this class is not used directly within this library, it serves as a template
            for consumers of the library to understand how to structure their JSON requests with payloads.
            This helps maintain consistency and clarity when performing JavaScript interop operations.
            </remarks>
        </member>
        <member name="P:TimeWarp.Features.JavaScriptInterop.JsonRequest`1.Payload">
            <summary>
            Gets or sets the payload of the request.
            This property contains the data being sent to the JavaScript function.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.JavaScriptInterop.JsonRequest`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TimeWarp.Features.JavaScriptInterop.JsonRequest`1"/> class.
            </summary>
            <param name="payload">The payload of the request.</param>
            <param name="requestType">The type of the request.</param>
        </member>
        <member name="M:TimeWarp.Features.JavaScriptInterop.TimeWarpJavaScriptInterop.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TimeWarp.Features.StateTransactions.StateTransactionBehavior`2">
            <summary>
              Represents a pipeline behavior in TimeWarp.State that clones the current state before processing a request.
              This behavior ensures that the state can be reverted to its original form in case of an error during the request handling.
              The cloning process is contingent upon the state implementing <see cref="T:System.ICloneable"/>, allowing for a deep copy.
              If the state does not implement <see cref="T:System.ICloneable"/>, it falls back to a custom clone method. This behavior is
              critical for maintaining application consistency and enables undo functionality.
            </summary>
            <remarks>
              This behavior is part of the TimeWarp.State pipeline, intercepting actions (requests) to clone the relevant state before
              proceeding. If an action fails, the system reverts to the cloned state, thus preventing partial state updates
              from corrupting the application state. It uses TimeWarp.Mediator's pipeline behavior feature to hook into the request handling
              process.
            </remarks>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.TimeWarpStateDevComponent">
            <summary>
            Adds a RenderModeDisplay RenderFragment to the TimeWarpStateComponent
            </summary>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.ReduxDevToolsBehavior`2">
             <summary>
            
             </summary>
             <typeparam name="TRequest"></typeparam>
             <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions">
            <summary>
            Redux Dev Tools Options (see docs)
            </summary>
            <remarks>
            https://github.com/reduxjs/redux-devtools/blob/f3ead32ebaca555002a92176c97dec9c27f2449c/extension/docs/API/Arguments.md
            </remarks>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures">
            <summary>
            
            </summary>
            <param name="Pause">start/pause recording of dispatched actions</param>
            <param name="Lock">lock/unlock dispatching actions and side effects</param>
            <param name="Persist">persist states on page reloading</param>
            <param name="Export">export history of actions in a file</param>
            <param name="Import">import history of actions from a file</param>
            <param name="Jump">jump back and forth (time travelling)</param>
            <param name="Skip">skip (cancel) actions</param>
            <param name="Reorder">drag and drop actions in the history list</param>
            <param name="Dispatch">dispatch custom actions or action creators</param>
            <param name="Test">generate tests for the selected actions</param>
        </member>
        <member name="M:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Pause">start/pause recording of dispatched actions</param>
            <param name="Lock">lock/unlock dispatching actions and side effects</param>
            <param name="Persist">persist states on page reloading</param>
            <param name="Export">export history of actions in a file</param>
            <param name="Import">import history of actions from a file</param>
            <param name="Jump">jump back and forth (time travelling)</param>
            <param name="Skip">skip (cancel) actions</param>
            <param name="Reorder">drag and drop actions in the history list</param>
            <param name="Dispatch">dispatch custom actions or action creators</param>
            <param name="Test">generate tests for the selected actions</param>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Pause">
            <summary>start/pause recording of dispatched actions</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Lock">
            <summary>lock/unlock dispatching actions and side effects</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Persist">
            <summary>persist states on page reloading</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Export">
            <summary>export history of actions in a file</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Import">
            <summary>import history of actions from a file</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Jump">
            <summary>jump back and forth (time travelling)</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Skip">
            <summary>skip (cancel) actions</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Reorder">
            <summary>drag and drop actions in the history list</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Dispatch">
            <summary>dispatch custom actions or action creators</summary>
        </member>
        <member name="P:TimeWarp.Features.ReduxDevTools.ReduxDevToolsOptions.TFeatures.Test">
            <summary>generate tests for the selected actions</summary>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.IReduxRequest">
            <summary>
            Marker Interface to allow for filtering of Devtools Requests
            </summary>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.StartHandler">
            <summary>
            Redux Devtools will send the Request once on startup
            </summary>
            <remarks>currently we do nothing at start up other than log</remarks>
        </member>
        <member name="M:TimeWarp.Features.ReduxDevTools.StartHandler.Handle(TimeWarp.Features.ReduxDevTools.StartRequest,System.Threading.CancellationToken)">
            <summary>
            Currently does nothing
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:TimeWarp.Features.ReduxDevTools.StartRequest">
            <summary>
            Request received from Redux Dev Tools when one presses the Start Button.
            </summary>
        </member>
        <member name="T:TimeWarp.Features.RenderSubscriptions.RenderSubscriptionContext">
            <summary>
            Provides control over subscription re-rendering.
            </summary>
            <remarks>
            Handler developers should inject this context and use the EnsureAction method
            to prevent automatic re-rendering of subscriptions for specific actions.
            This allows for fine-grained control over the rendering process and can
            significantly improve application performance.
            </remarks>
        </member>
        <member name="M:TimeWarp.Features.RenderSubscriptions.RenderSubscriptionContext.EnsureAction(TimeWarp.State.IAction,System.Boolean)">
            <summary>
            Registers the action with the context.
            Ensures that subscriptions will not be fired for the specified action.
            </summary>
            <param name="action"></param>
            <param name="shouldFireSubscriptions"></param>
        </member>
        <member name="M:TimeWarp.Features.RenderSubscriptions.RenderSubscriptionContext.ShouldFireSubscriptionsForAction(TimeWarp.State.IAction)">
            <summary>
            Returns true if the action should fire subscriptions.
            If the action has not been registered with EnsureAction, then it will fire subscriptions by default.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TimeWarp.Features.RenderSubscriptions.RenderSubscriptionContext.Reset">
            <summary>
            Resets the context.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.RenderSubscriptions.RenderSubscriptionContext.RemoveAction(System.String)">
            <summary>
            Removes the action from the context.
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:TimeWarp.Features.Developer.ReduxDevTools.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:TimeWarp.Features.Developer.RenderModeDisplay.ConfiguredRenderMode">
            <summary>
            The render mode that is configured for the component.
            </summary>
        </member>
        <member name="P:TimeWarp.Features.Developer.RenderModeDisplay.CurrentRenderMode">
            <summary>
            The render mode that is currently being used by the component.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.Developer.RenderModeDisplay.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="T:System.Reflection.MethodInfoExtensions">
            <summary>
            Use reflection to invoke an Async method.
            </summary>
            <seealso href="https://stackoverflow.com/questions/39674988/how-to-call-a-generic-async-method-using-reflection"/>
        </member>
    </members>
</doc>
