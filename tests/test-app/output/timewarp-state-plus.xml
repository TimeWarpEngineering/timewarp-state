<?xml version="1.0"?>
<doc>
    <assembly>
        <name>timewarp-state-plus</name>
    </assembly>
    <members>
        <member name="T:TimeWarp.State.Plus.AssemblyMarker">
            <summary>
            Serves as a marker for the assembly, facilitating easy identification and reflection-based operations.
            </summary>
            <remarks>
            This class is intended to be used as a reference point within the assembly for scenarios such as assembly scanning,
            where a stable, known type is required to locate the assembly at runtime. The class is sealed to indicate it is not
            designed for inheritance or extension, reinforcing its role as a simple marker.
            </remarks>
        </member>
        <member name="T:TimeWarp.State.Plus.Extensions.AssemblyInfo">
            <summary>
            Represents information extracted from an assembly's metadata attributes.
            </summary>
        </member>
        <member name="M:TimeWarp.State.Plus.Extensions.AssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:TimeWarp.State.Plus.Extensions.AssemblyInfo"/> class
            using the specified assembly to extract metadata attributes.
            </summary>
            <param name="assembly">The assembly from which to extract metadata attributes.</param>
        </member>
        <member name="M:TimeWarp.State.Plus.Extensions.AssemblyInfo.GetMetadata(System.String)">
            <summary>
            Gets the value of a specific metadata attribute by key.
            </summary>
            <param name="key">The key of the metadata attribute to retrieve.</param>
            <returns>The value of the metadata attribute if found; otherwise, null.</returns>
        </member>
        <member name="P:TimeWarp.State.Plus.Extensions.AssemblyInfo.CommitHash">
            <summary>
            Gets the commit hash stored in the assembly's metadata, if available.
            </summary>
            <value>The commit hash, or null if not available.</value>
        </member>
        <member name="P:TimeWarp.State.Plus.Extensions.AssemblyInfo.CommitDate">
            <summary>
            Gets the commit date stored in the assembly's metadata, if available.
            </summary>
            <value>The commit date in string format, or null if not available.</value>
        </member>
        <member name="M:TimeWarp.State.Plus.Extensions.ServiceCollectionExtensions.AddTimeWarpStateRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register TimeWarp.State.Plus Routing 
            </summary>
            <param name="serviceCollection"></param>
        </member>
        <member name="M:TimeWarp.State.Plus.Features.Timers.TimerState.Clone">
            <summary>
            Creates a new instance of TimerState with the same configuration and Timer instances.
            </summary>
            <remarks>
            This method performs a shallow clone of the state.
            It reuses the existing Timer instances and configuration.
            If an error occurs in an action, it will not rollback to the previous state.
            This approach is intentional to maintain consistency of timer states across clones.
            Actions are expected to be well-tested and reliable, minimizing the risk of failures.
            </remarks>
            <returns>A new TimerState instance with the same configuration and Timer instances.</returns>
        </member>
        <member name="M:TimeWarp.State.Plus.State.TimeWarpCacheableState`1.IsCacheValid(System.String)">
            <summary>
            Checks if the cache is valid based on the current cache key and timestamp
            </summary>
            <param name="currentCacheKey">The cache key to validate against</param>
            <returns>True if the cache is valid, otherwise false</returns>
        </member>
        <member name="T:TimeWarp.Features.Routing.TimeWarpPageRenderNotifier">
            <summary>
            A component that Sends RouteState.PushRouteInfo.Action for every OnAfterRenderAsync.
            </summary>
            <remarks>
            <para>
            Recommended: It is recommended to call 
            <c>await Sender.Send(new RouteState.PushRouteInfo.Action());</c> 
            in the <c>OnAfterRenderAsync</c> method of the consuming page component.
            This reduces the number of times this action is fired, improving performance.
            If you implement the recommended approach, you do not need to include this <c>TimeWarpPageRenderNotifier</c> component.
            </para>
            <para>
            This component uses a nonce to ensure the component is always re-rendered.
            </para>
            </remarks>
            <example>
            <code>
            &lt;TimeWarpPageRenderNotifier @rendermode=InteractiveAuto Nonce=@Guid.NewGuid() /&gt;
            </code>
            </example>
        </member>
        <member name="P:TimeWarp.Features.Routing.TimeWarpPageRenderNotifier.Nonce">
            <summary>
            The Nonce is used to ensure that the correct page title is set.
            Will reload this component on every page render.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.Routing.TimeWarpPageRenderNotifier.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:TimeWarp.Features.Routing.RouteState">
            <summary>
            Maintain the Route in TimeWarp.State
            </summary>
        </member>
        <member name="P:TimeWarp.Features.Routing.RouteState.Routes">
            <summary>
            The collection of RouteInfo that have been navigated to
            </summary>
            <remarks>Is public so will be serialized and visible in DevTools and maybe UX wants to display the stack.</remarks>
        </member>
        <member name="P:TimeWarp.Features.Routing.TwBreadcrumb.MaxLinks">
            <summary>
            Maximum number of breadcrumb links to display.
            If set to 0 or negative, all links will be shown.
            When limited, shows the most recent navigation links.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.Routing.TwBreadcrumb.NavigateBack(System.Int32)">
            <summary>
            Navigates back in the route history by the specified number of steps
            </summary>
            <param name="stepsBack">Number of steps to go back in the navigation history</param>
        </member>
        <member name="T:TimeWarp.Features.Theme.ThemeState.Theme">
            <summary>
            Represents the different themes that the app can have.
            </summary>
        </member>
        <member name="M:TimeWarp.Features.Theme.ThemeState.Initialize(TimeWarp.Features.Theme.ThemeState.Theme)">
            <summary>
            Use in Tests ONLY, to initialize the State
            </summary>
            <param name="currentTheme"></param>
        </member>
    </members>
</doc>
