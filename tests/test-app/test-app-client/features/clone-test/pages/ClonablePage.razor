@namespace Test.App.Client.Features.CloneTest.Pages
@rendermode InteractiveAuto
@attribute [Route(Route)]
@inherits BaseComponent
<TwPageTitle>@Title</TwPageTitle>
<h3>@Title</h3>
@RenderModeDisplay
<hr>
<!-- Arrange -->
<!-- Test description -->
<p>
  The StateTransactionBehavior middleware in TimeWarp.State is designed to use ICloneable if it is implemented and Anyclone otherwise..<br>
  This test is to verify that the IClonable interface is working as expected.<br>
  The clone method intentionally creates a new instance where the count is always 42.<br>
  And the Increment method increments the count by 1.<br>
  If AnyClone was being used it would properly clone the state and the count would keep increasing by 1.<br>
  Thus this proves we are using ICloneable and not AnyClone.
</p>

<!-- Values to validate -->
<ul>
  <li>
    <strong>CloneableState.Count:</strong> @CloneableState.Count
  </li>
  <li>
    <strong>CloneableState.Guid:</strong> @CloneableState.Guid
  </li>
</ul>

<!-- Actions to take -->
<button data-qa="TestButton" @onclick=RunTest>Run Test</button>

<hr>
<!-- ACT -->
<p><strong>Act:</strong>Click the `Run Test` button</p>

<!-- ASSERT -->
<p>
  <strong>Assert:</strong><br/>
  Guid is different
  Count == 43.
</p>

@code {
  /// <summary>
  /// The title of the page
  /// </summary>
  public const string Title = "IClonable Test Page";

  /// <summary>
  /// The route to this page
  /// </summary>
  public const string Route = "/iclonable-test";
  private void RunTest()
  {
    Send(new CloneableState.CloneTestActionSet.Action());
  }
}
