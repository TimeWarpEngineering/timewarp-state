@namespace Test.App.Client.Pages
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [Route(Route)]
@using Test.App.Client.Features.WeatherForecast
@using Test.App.Contracts.Features.WeatherForecast
@inherits BaseComponent

@code
{
  /// <summary>
  /// The title for the page.
  /// </summary>
  public const string Title = "Weather (Wasm)";

  /// <summary>
  /// The route for the page.
  /// </summary>
  public const string Route = "/WasmWeatherForecastsPage";

  /// <inheritdoc/>
  protected override async Task OnInitializedAsync()
  {
    await Mediator.Send(new WeatherForecastsState.FetchWeatherForecastsActionSet.Action());
  }
}

<TwPageTitle>@Title</TwPageTitle>
<h1>Wasm Weather</h1>
@RenderModeDisplay
<br/>
<div>This component demonstrates fetching data from the server.</div>

@if (WeatherForecastsState.WeatherForecasts == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table" data-qa="WeatherForecastTable">
    <thead>
      <tr>
        <th>Date</th>
        <th>Temp. (C)</th>
        <th>Temp. (F)</th>
        <th>Summary</th>
      </tr>
    </thead>
    <tbody>
      @foreach (GetWeatherForecasts.WeatherForecastDto forecast in WeatherForecastsState.WeatherForecasts)
      {
        <tr>
          <td>@forecast.Date.ToShortDateString()</td>
          <td>@forecast.TemperatureC</td>
          <td>@forecast.TemperatureF</td>
          <td>@forecast.Summary</td>
        </tr>
      }
    </tbody>
  </table>
}

<hr>
<!-- ACT -->
<p><strong>Act:</strong>Load this page</p>

<!-- ASSERT -->
<p>
  <strong>Assert:</strong>
  Current Render Mode == Wasm<br/>
  Configured Render Mode: InteractiveWebAssemblyRenderMode<br/>
  The page should render the weather forecast data in a table.
</p>
