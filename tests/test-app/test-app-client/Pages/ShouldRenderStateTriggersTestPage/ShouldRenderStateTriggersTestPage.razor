@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@attribute [Route(Route)]
@inherits BaseComponent

@code
{
  public const string Title = "RenderTriggers";
  public const string Route = "/render-triggers-test";

  private int ParentInt { get; set; } = 0;
  private int SomeInt { get; set; } = 0;
  private string SomeString { get; set; } = "Initial";
  private ComplexType SomeComplex { get; set; } = new();
  private EventCallback<MouseEventArgs> SomeCallback { get; set; }
  private int CascadeValue { get; set; }
  private List<ComplexType> SomeComplexCollection = [];
  protected override void OnInitialized()
  {
    base.OnInitialized();
    SomeCallback = EventCallback.Factory.Create<MouseEventArgs>(this, HandleCallback);
  }

  private void TriggerEvent()
  {
    ParentInt++;
  }

  private void TriggerParameterChangeOfPrimitiveType()
  {
    SomeInt++;
    SomeString = $"Updated {SomeInt}";
  }

  private void TriggerParameterChangeOfComplexType()
  {
    SomeComplex = new ComplexType
    {
      Property = SomeComplex.Property + 1
    };
  }

  private void TriggerParameterChangeOfEventCallback()
  {
    SomeCallback = EventCallback.Factory.Create<MouseEventArgs>(this, NewHandleCallback);
  }

  private void TriggerParameterChangeOfCascadingParameter()
  {
    CascadeValue++;
  }
  private void TriggerSubscriptionUpdate()
  {
    Mediator.Send(new CounterState.IncrementCountActionSet.Action());
  }

  private void TriggerForceRender()
  {
    ReRender();
  }

  private void TriggerStateHasChanged()
  {
    StateHasChanged();
  }

  private void HandleCallback(MouseEventArgs args) {}
  private void NewHandleCallback(MouseEventArgs args) {}

  public class ComplexType
  {
    public int Property { get; init; }
    public int ConstrainedProperty { get; init; }
  }

  public class DifferentComplexType
  {
    public int Property { get; init; }
    public int AnotherProperty { get; init; }
  }

  private void TriggerCounterStateChange()
  {
    Send(new CounterState.IncrementCountActionSet.Action());
  }
  private void TriggerParameterChangeOfCollection()
  {
    // This is creating a new instance of ComplexType every time.
    SomeComplexCollection =
    [
      new ComplexType
      {
        Property = 1
      }
    ];
    // TODO: change existing instance
    // TODO: add new instance to collection
    // TODO: remove instance from collection
    // TODO: change existing instance in collection
  }
}

<TwPageTitle>@Title</TwPageTitle>
<div class=@Id>
  <div class="fixed-content">
    <h4>@Title</h4>
    @RenderModeDisplay
    <hr>

    <div class="render-info-container">
      <div>Component State, ParentInt: @ParentInt</div>
      <div>ShouldRenderWasCalledBy: @ShouldRenderWasCalledBy</div>
      <div>Render Count (2): @(RenderCount+1)</div>
      <div>SetParametersAsyncWasCalledBy: @SetParametersAsyncWasCalledBy</div>
      <div>Render Reason: @RenderReason</div>
      <div>StateHasChangedWasCalledBy: @StateHasChangedWasCalledBy</div>
      <div>Render Reason Detail: @RenderReasonDetail</div>
    </div>

    <hr>
    <div class="button-container">
      <button @onclick=TriggerEvent>Trigger Event (Increment ParentInt)</button>
      <button @onclick=TriggerSubscriptionUpdate>Trigger Subscription Update</button>
      <button @onclick=TriggerForceRender>Trigger Force Render</button>
      <button @onclick=TriggerCounterStateChange>Trigger a CounterState Change</button>
    </div>
  </div>

  <div class="scrollable-content">

    <div class="grid-container">
      <ChildComponentWithCounterStateSubscription/>
      <ChildComponentWithCounterStateRenderTrigger/>
    </div>
  </div>
</div>

<style>
  @($@"
    .{Id} {{
      display: flex;
      flex-direction: column;
      height: 100vh;
      font-size: 0.750rem; /* Adjust the font size as needed */
      margin-bottom: 1rem;
    }}

    .{Id} .fixed-content {{
      flex-shrink: 0;
    }}

    .{Id} .render-info-container {{
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0px;
    }}

    .{Id} .scrollable-content {{
      flex-grow: 1;
      overflow-y: auto;
    }}

    .{Id} .button-container {{
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 4px;
    }}

    .{Id} .grid-container {{
      margin-top: 1rem;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }}

    .{Id} .grid-container * {{
      min-width: 0;
    }}

    /* Ensure the last child (Counter) spans full width if odd number of children */
    .{Id} .grid-container > :last-child:nth-child(odd) {{
      grid-column: 1 / -1;
    }}
  ")
</style>
