@inherits TimeWarp.State.TimeWarpStateComponent

@code
{
  /// <summary>
  /// Maximum number of breadcrumb links to display. 
  /// If set to 0 or negative, all links will be shown.
  /// When limited, shows the most recent navigation links.
  /// </summary>
  [Parameter]
  public int MaxLinks { get; set; }

  RouteState RouteState => GetState<RouteState>();

  private List<RouteState.RouteInfo> Routes => RouteState.Routes.ToList();

  private List<RouteState.RouteInfo> DisplayRoutes => MaxLinks > 0 
    ? Routes.Take(MaxLinks).Reverse().ToList() 
    : Routes.Reverse().ToList();

  private bool ShowEllipsis => MaxLinks > 0 && Routes.Count > MaxLinks;

  /// <summary>
  /// Navigates back in the route history by the specified number of steps
  /// </summary>
  /// <param name="stepsBack">Number of steps to go back in the navigation history</param>
  private async Task NavigateBack(int stepsBack)
  {
    if (stepsBack > 0)
    {
      await RouteState.GoBack(stepsBack);
    }
  }
}

<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    @if (ShowEllipsis)
    {
      <li class="breadcrumb-item">
        <span class="text-muted">...</span>
      </li>
    }

    @for (int routeIndex = 0; routeIndex < DisplayRoutes.Count; routeIndex++)
    {
      RouteState.RouteInfo route = DisplayRoutes[routeIndex];
      <li class="breadcrumb-item">
        <NavLink href="@route.Url" @onclick="@(() => NavigateBack(routeIndex))">
          @route.PageTitle
        </NavLink>
      </li>
    }
  </ol>
</nav>
